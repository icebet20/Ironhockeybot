import os
import logging
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Bot, Update, InputFile
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ---------- env ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL_USERNAME")            # e.g. @kfkfkjfjfc
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))         # your numeric Telegram ID (via @userinfobot)
TIMEZONE_OFFSET = int(os.getenv("TZ_OFFSET", "3")) # Moscow = +3
WELCOME_ON_START = os.getenv("WELCOME_ON_START", "true").lower() == "true"

# ---------- logging ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("iron-hockey")

# ---------- helpers ----------
async def send_photo(bot: Bot, photo_path_or_url: str, caption: str = ""):
    if photo_path_or_url.startswith("http"):
        await bot.send_photo(CHANNEL, photo=photo_path_or_url, caption=caption, parse_mode=ParseMode.MARKDOWN)
    else:
        with open(photo_path_or_url, "rb") as f:
            await bot.send_photo(CHANNEL, photo=InputFile(f), caption=caption, parse_mode=ParseMode.MARKDOWN)

async def send_text(bot: Bot, text: str):
    await bot.send_message(CHANNEL, text, parse_mode=ParseMode.MARKDOWN)

# ---------- commands for ADMIN only ----------
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else 0
        if uid != ADMIN_ID:
            return
        return await func(update, context)
    return wrapper

@admin_only
async def post_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /post <text> ‚Äî –ø–æ—Å—Ç–∏—Ç —Ç–µ–∫—Å—Ç
    /postphoto <url> | <–ø–æ–¥–ø–∏—Å—å> ‚Äî –ø–æ—Å—Ç–∏—Ç —Ñ–æ—Ç–æ (url –∏–ª–∏ —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
    """
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /post –¢–ï–ö–°–¢")
        return
    await send_text(context.bot, text)
    await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")

@admin_only
async def postphoto_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    argline = " ".join(context.args)
    if "|" in argline:
        url, caption = [a.strip() for a in argline.split("|", 1)]
    else:
        url, caption = argline.strip(), ""
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å–ª–∞–Ω–æ —Ñ–∞–π–ª–æ–º –≤ —Ä–µ–ø–ª–∞–µ
    if not url and update.message.reply_to_message and update.message.reply_to_message.photo:
        file_id = update.message.reply_to_message.photo[-1].file_id
        await context.bot.send_photo(CHANNEL, photo=file_id, caption=caption, parse_mode=ParseMode.MARKDOWN)
    else:
        await send_photo(context.bot, url, caption)
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")

@admin_only
async def schedule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /schedule HH:MM | –¢–ï–ö–°–¢ ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
    /schedulephoto HH:MM | URL | –ü–û–î–ü–ò–°–¨ ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ
    –í—Ä–µ–º—è –ø–æ –ú–°–ö (TZ_OFFSET).
    """
    line = " ".join(context.args)
    if "|" not in line:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /schedule 18:00 | –¢–ï–ö–°–¢")
        return
    time_str, payload = [p.strip() for p in line.split("|", 1)]
    try:
        now = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        hh, mm = map(int, time_str.split(":"))
        run_local = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_local <= now:
            run_local += timedelta(days=1)
        run_utc = run_local - timedelta(hours=TIMEZONE_OFFSET)
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 18:30")
        return

    job_id = f"txt-{run_utc.isoformat()}"
    context.job_queue.run_once(
        lambda c: c.bot.send_message(CHANNEL, payload, parse_mode=ParseMode.MARKDOWN),
        when=(run_utc - datetime.utcnow()).total_seconds(),
        name=job_id,
        chat_id=update.effective_chat.id
    )
    await update.message.reply_text(f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {time_str} –ú–°–ö")

@admin_only
async def schedulephoto_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    line = " ".join(context.args)
    parts = [p.strip() for p in line.split("|")]
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /schedulephoto 18:00 | URL | –ü–û–î–ü–ò–°–¨")
        return
    time_str, url = parts[0], parts[1]
    caption = parts[2] if len(parts) > 2 else ""

    try:
        now = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        hh, mm = map(int, time_str.split(":"))
        run_local = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_local <= now:
            run_local += timedelta(days=1)
        run_utc = run_local - timedelta(hours=TIMEZONE_OFFSET)
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 18:30")
        return

    async def _job(ctx: ContextTypes.DEFAULT_TYPE):
        await send_photo(ctx.bot, url, caption)

    # —á–µ—Ä–µ–∑ APScheduler (–Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è Railway)
    scheduler: AsyncIOScheduler = update.application.job_queue.scheduler  # type: ignore
    scheduler.add_job(lambda: asyncio.create_task(_job(context)),
                      "date", run_date=run_utc)

    await update.message.reply_text(f"üóì –§–æ—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {time_str} –ú–°–ö")

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user and update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("–ë–æ—Ç –≥–æ—Ç–æ–≤. –ö–æ–º–∞–Ω–¥—ã: /post, /postphoto, /schedule, /schedulephoto")
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!")

async def main():
    if not BOT_TOKEN or not CHANNEL:
        raise SystemExit("BOT_TOKEN –∏ CHANNEL_USERNAME –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
    app = Application.builder().token(BOT_TOKEN).build()

    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–¥–ª—è schedulephoto)
    scheduler = AsyncIOScheduler()
    scheduler.start()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("post", post_cmd))
    app.add_handler(CommandHandler("postphoto", postphoto_cmd))
    app.add_handler(CommandHandler("schedule", schedule_cmd))
    app.add_handler(CommandHandler("schedulephoto", schedulephoto_cmd))
    # –∏–≥–Ω–æ—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: None))

    if WELCOME_ON_START and ADMIN_ID:
        try:
            await app.bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. /post /schedule –≥–æ—Ç–æ–≤—ã.")
        except Exception as e:
            log.warning(f"notify admin failed: {e}")

    await app.initialize()
    await app.start()
    log.info("IRON HOCKEY bot running‚Ä¶")
    await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
    await app.updater.wait()

if __name__ == "__main__":
    asyncio.run(main())
